generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String?
  firstName       String
  lastName        String
  createdAt       DateTime  @default(now())
  lastLogin       DateTime? @default(now())
  googleId        String?
  cellphoneNumber String?
}

model Team {
  id             Int          @id @default(autoincrement())
  name           String       @unique
  players        Player[]
  tournaments    Tournament[] // Relación implícita muchos a muchos
  matchesAsTeamA Match[]      @relation("TeamA") // Relación como "Team A"
  matchesAsTeamB Match[]      @relation("TeamB") // Relación como "Team B"
  scoreTables    ScoreTable[]
  matchStats     MatchStats[]
}

model Player {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  teamId     Int
  createdAt  DateTime     @default(now())
  team       Team?        @relation(fields: [teamId], references: [id])
  matchStats MatchStats[]
}

model Tournament {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  isActive    Boolean?     @default(true)
  startDate   DateTime
  endDate     DateTime?
  teams       Team[] // Relación implícita muchos a muchos
  matches     Match[] // Relación implícita muchos a muchos
  scoreTables ScoreTable[]
  createdAt   DateTime     @default(now())
  MatchDay    MatchDay[]
}

model Match {
  id           Int    @id @default(autoincrement())
  tournamentId Int
  teamAId      Int
  teamBId      Int
  matchDayId   Int // Relación con MatchDay
  resultTeamA  Int // Resultado del equipo A
  resultTeamB  Int // Resultado del equipo B
  map          String // Nombre del mapa jugado

  tournament Tournament   @relation(fields: [tournamentId], references: [id])
  teamA      Team         @relation("TeamA", fields: [teamAId], references: [id])
  teamB      Team         @relation("TeamB", fields: [teamBId], references: [id])
  matchDay   MatchDay     @relation(fields: [matchDayId], references: [id])
  matchStats MatchStats[]
}

model MatchDay {
  id           Int     @id @default(autoincrement())
  tournamentId Int
  name         String // Nombre de la jornada, por ejemplo, "Fecha 1", "Fecha 2", etc.
  matches      Match[] // Relación uno a muchos con los partidos

  tournament Tournament @relation(fields: [tournamentId], references: [id])
}

model MatchStats {
  id       Int @id @default(autoincrement())
  matchId  Int
  playerId Int
  kills    Int @default(0) // Asesinatos
  deaths   Int @default(0) // Muertes
  teamId   Int

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
  team   Team   @relation(fields: [teamId], references: [id])
}

model ScoreTable {
  id           Int        @id @default(autoincrement())
  tournamentId Int
  teamId       Int
  points       Int        @default(0) // Puntos acumulados por equipo
  wins         Int        @default(0)
  losses       Int        @default(0)
  draws        Int        @default(0)
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  team         Team       @relation(fields: [teamId], references: [id])
}
